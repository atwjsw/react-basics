#背景介绍
- React 是一个用于构建用户界面的 JAVASCRIPT 库。
- React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。
- React 起源于 Facebook 的内部项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。
- React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。

#React 特点
1.声明式设计 −React采用声明范式，可以轻松描述应用。
2.高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。
3.灵活 −React可以与已知的库或框架很好地配合。
4.JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。
5.组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。
6.单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。

#通过 npm 使用 React
- 如果你的系统还不支持 Node.js 及 NPM 可以参考我们的 Node.js 教程。
- 我们建议在 React 中使用 CommonJS 模块系统，比如 browserify 或 webpack，本教程使用 webpack。

#React JSX
- React 使用 JSX 来替代常规的 JavaScript。
- JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。
- 我们不需要一定使用 JSX，但它有以下优点：
    JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。
    它是类型安全的，在编译过程中就能发现错误。
    使用 JSX 编写模板更加简单快速。

#JSX 表达式
-  可以在 JSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中。
- 在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代。
- 以下实例中如果变量 i 等于 1 浏览器将输出 true, 如果修改 i 的值，则会输出 false.

# JSX 样式
- React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。

# JSX注释
注释需要写在花括号中

# HTML 标签 vs. React 组件
- React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。
- 要渲染 HTML 标签，只需在 JSX 里使用小写字母的标签名。
	var myDivElement = <div className="foo" />;
	ReactDOM.render(myDivElement, document.getElementById('example'));
- 要渲染 React 组件，只需创建一个大写字母开头的本地变量。
	var MyComponent = React.createClass({/*...*/});
	var myElement = <MyComponent someProperty={true} />;
	ReactDOM.render(myElement, document.getElementById('example'));
- React 的 JSX 使用大、小写的约定来区分本地组件的类和 HTML 标签。 

React 组件
- 本章节我们将讨论如何使用组件使得我们的应用更容易来管理。

# React State(状态)
- React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。
- React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。

#React Props
- state 和 props 主要的区别在于 props 是不可变的，而 state 可以根据与用户交互来改变。
- 这就是为什么有些容器组件需要定义 state 来更新和修改数据。 而子组件只能通过 props 来传递数据。
- 可以通过 getDefaultProps() 方法为 props 设置默认值

#Props 验证
- Props 验证使用 propTypes，它可以保证我们的应用组件被正确使用，
- React.PropTypes 提供很多验证器 (validator) 来验证传入数据是否有效。当向 props 传入无效数据时，JavaScript 控制台会抛出警告。

# React 组件 API
- 设置状态：setState
- 替换状态：replaceState
- 设置属性setProps
- 替换属性replaceProps
- 强制更新：forceUpdate
- 获取DOM节点：findDOMNode
- 判断组件挂载状态：isMounted

##设置状态:setState
- setState(object nextState[, function callback])
- 参数说明
    nextState，将要设置的新状态，该状态会和当前的state合并
    callback，可选参数，回调函数。该函数会在setState设置成功，且组件重新渲染后调用。
- 合并nextState和当前state，并重新渲染组件。setState是React事件处理函数中和请求回调函数中触发UI更新的主要方法。
关于setState
- 不能在组件内部通过this.state修改状态，因为该状态会在调用setState()后被替换。
- setState()并不会立即改变this.state，而是创建一个即将处理的state。
- setState()并不一定是同步的，为了提升性能React会批量执行state和DOM渲染。
- setState()总是会触发一次组件重绘，除非在shouldComponentUpdate()中实现了一些条件渲染逻辑。

##替换状态：replaceState
- replaceState(object nextState[, function callback])
    nextState，将要设置的新状态，该状态会替换当前的state。
    callback，可选参数，回调函数。该函数会在replaceState设置成功，且组件重新渲染后调用。
- replaceState()方法与setState()类似，但是方法只会保留nextState中状态，原state不在nextState中的状态都会被删除。

##设置属性：setProps
- setProps(object nextProps[, function callback])
    nextProps，将要设置的新属性，该状态会和当前的props合并
    callback，可选参数，回调函数。该函数会在setProps设置成功，且组件重新渲染后调用。
- 设置组件属性，并重新渲染组件。
- props相当于组件的数据流，它总是会从父组件向下传递至所有的子组件中。当和一个外部的JavaScript应用集成时，我们可能会需要向组件传递数据或通知React.render()组件需要重新渲染，可以使用setProps()。
- 更新组件，我可以在节点上再次调用React.render()，也可以通过setProps()方法改变组件属性，触发组件重新渲染。

##替换属性：replaceProps
- replaceProps(object nextProps[, function callback])
    nextProps，将要设置的新属性，该属性会替换当前的props。
    callback，可选参数，回调函数。该函数会在replaceProps设置成功，且组件重新渲染后调用。
- replaceProps()方法与setProps类似，但它会删除原有props

##强制更新：forceUpdate
- forceUpdate([function callback])
- 参数说明
    callback，可选参数，回调函数。该函数会在组件render()方法调用后调用。
	forceUpdate()方法会使组件调用自身的render()方法重新渲染组件，组件的子组件也会调用自己的render()。但是，组件重新渲染时，依然会读取this.props和this.state，如果状态没有改变，那么React只会更新DOM。
- forceUpdate()方法适用于this.props和this.state之外的组件重绘（如：修改了this.state后），通过该方法通知React需要调用render()
- 一般来说，应该尽量避免使用forceUpdate()，而仅从this.props和this.state中读取状态并由React触发render()调用。

##获取DOM节点：findDOMNode
- DOMElement findDOMNode()
    返回值：DOM元素DOMElement
- 如果组件已经挂载到DOM中，该方法返回对应的本地浏览器 DOM 元素。当render返回null 或 false时，this.findDOMNode()也会返回null。从DOM 中读取值的时候，该方法很有用，如：获取表单字段的值和做一些 DOM 操作。

##判断组件挂载状态：isMounted
- bool isMounted()
    返回值：true或false，表示组件是否已挂载到DOM中
- isMounted()方法用于判断组件是否已挂载到DOM中。可以使用该方法保证了setState()和forceUpdate()在异步场景下的调用不会出错。

#React 组件生命周期
- 组件的生命周期可分成三个状态：
    Mounting：已插入真实 DOM
    Updating：正在被重新渲染
    Unmounting：已移出真实 DOM
- 生命周期的方法有：
- componentWillMount 在渲染前调用,在客户端也在服务端。
- componentDidMount : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。 如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。
- componentWillReceiveProps 在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用。    
- shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。
可以在你确认不需要更新组件时使用。
- componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。
- componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。
- componentWillUnmount在组件从 DOM 中移除的时候立刻被调用。

#React AJAX
- React 组件的数据可以通过 componentDidMount 方法中的 Ajax 来获取，当从服务端获取数据库可以将数据存储在 state 中，再用 this.setState 方法重新渲染 UI。
- 当使用异步加载数据时，在组件卸载前使用 componentWillUnmount 来取消未完成的请求。

#React 表单与事件
设置了输入框 input 值value = {this.state.data}。在输入框值发生变化时我们可以更新 state。我们可以使用 onChange 事件来监听 input 的变化，并修改 state

#React Refs
- React 支持一种非常特殊的属性 Ref ，你可以用来绑定到 render() 输出的任何组件上。
- 这个特殊的属性允许你引用 render() 返回的相应的支撑实例（ backing instance ）。这样就可以确保在任何时间总是拿到正确的实例